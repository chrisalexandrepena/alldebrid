name: CD (Release)

permissions:
  contents: write
  id-token: write

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      dry_run:
        description: 'Dry run (do not publish)'
        required: false
        default: true
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  check-changes:
    name: Check for Publishable Changes
    runs-on: ubuntu-latest
    timeout-minutes: 20
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if release is needed
        id: check
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=manual" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For tag-based releases, always allow
          if [[ "${{ github.event_name }}" == "push" ]] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "version=${GITHUB_REF_NAME#v}" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "should_release=false" >> $GITHUB_OUTPUT

  release:
    name: Build and Release
    runs-on: ubuntu-latest
    needs: check-changes
    if: needs.check-changes.outputs.should_release == 'true'
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js 20
        uses: actions/setup-node@v5
        with:
          node-version: 20
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile --prefer-offline

      - name: Run full test suite
        run: |
          pnpm typecheck
          pnpm lint
          pnpm test:unit

      - name: Build
        run: pnpm build

      - name: Run E2E tests (if enabled)
        if: vars.ENABLE_E2E_TESTS == 'true'
        run: pnpm test:e2e
        env:
          ALLDEBRID_API_KEY: ${{ secrets.ALLDEBRID_API_KEY }}

      - name: Validate current version (manual releases only)
        if: github.event_name == 'workflow_dispatch'
        uses: EndBug/version-check@v2
        with:
          file-name: ./package.json
          file-url: https://unpkg.com/alldebrid@latest/package.json
          static-checking: localIsNew

      - name: Determine version bump (manual only)
        if: github.event_name == 'workflow_dispatch'
        id: version
        run: |
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          echo "üì¶ Release type: $RELEASE_TYPE"

      - name: Bump version (manual only)
        if: github.event_name == 'workflow_dispatch'
        id: bump
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          pnpm version ${{ steps.version.outputs.release_type }} --no-git-tag-version
          
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "üìã Version: $CURRENT_VERSION ‚Üí $NEW_VERSION"

      - name: Update changelog (manual only)
        if: github.event_name == 'workflow_dispatch'
        run: |
          # Create or update CHANGELOG.md
          if [[ ! -f CHANGELOG.md ]]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file." >> CHANGELOG.md
            echo "" >> CHANGELOG.md
          fi
          
          # Add new version entry
          DATE=$(date +%Y-%m-%d)
          VERSION="${{ steps.bump.outputs.new_version }}"
          
          # Create temp changelog with new entry
          {
            echo "# Changelog"
            echo ""
            echo "All notable changes to this project will be documented in this file."
            echo ""
            echo "## [${VERSION}] - ${DATE}"
            echo ""
            
            # Get commits since last tag for changelog
            LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            if [[ -n "$LAST_TAG" ]]; then
              git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s" | head -20
            else
              echo "- Initial release"
            fi
            echo ""
            echo ""
            
            # Append existing changelog (skip header)
            if [[ -f CHANGELOG.md ]]; then
              tail -n +4 CHANGELOG.md 2>/dev/null || true
            fi
          } > CHANGELOG.tmp && mv CHANGELOG.tmp CHANGELOG.md

      - name: Commit version bump (manual only)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
        run: |
          git add package.json CHANGELOG.md
          git commit -m "üîñ Release v${{ steps.bump.outputs.new_version }}"

      - name: Create release package
        run: |
          pnpm pack
          
          # Verify package contents
          echo "üì¶ Package contents:"
          tar -tzf alldebrid-*.tgz | head -20

      - name: Publish to npm
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "üöÄ Publishing to npm with provenance..."
          pnpm publish --access public --no-git-checks --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          NPM_CONFIG_PROVENANCE: true

      - name: Push changes (manual only)
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true'
        run: |
          git push origin main

      - name: Create GitHub Release (tag pushes only)
        if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') && github.event.inputs.dry_run != 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          body: |
            ## Changes in ${{ github.ref_name }}
            
            This release was automatically generated from the main branch.
            
            ### Installation
            ```bash
            npm install -g alldebrid@${{ github.ref_name }}
            # or for local SDK usage
            npm install alldebrid@${{ github.ref_name }}
            ```
            
            ### What's Changed
            See the [changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for detailed changes.
            
            **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.bump.outputs.current_version }}...v${{ steps.bump.outputs.new_version }}
          draft: false
          prerelease: false

      - name: Post-release cleanup
        if: github.event.inputs.dry_run != 'true'
        run: |
          echo "‚úÖ Release v${{ steps.bump.outputs.new_version }} completed successfully!"
          echo "üì¶ NPM: https://www.npmjs.com/package/alldebrid/v/${{ steps.bump.outputs.new_version }}"
          echo "üè∑Ô∏è GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ steps.bump.outputs.new_version }}"

      - name: Dry run summary
        if: github.event.inputs.dry_run == 'true'
        run: |
          echo "üîç DRY RUN SUMMARY"
          echo "=================="
          echo "Would release version: ${{ steps.bump.outputs.new_version }}"
          echo "Release type: ${{ steps.version.outputs.release_type }}"
          echo "Current version: ${{ steps.bump.outputs.current_version }}"
          echo ""
          echo "Changes that would be made:"
          echo "- Update package.json version"
          echo "- Update CHANGELOG.md"
          echo "- Create git tag v${{ steps.bump.outputs.new_version }}"
          echo "- Publish to npm"
          echo "- Create GitHub release"
          echo ""
          echo "No actual changes were made (dry run mode)."
